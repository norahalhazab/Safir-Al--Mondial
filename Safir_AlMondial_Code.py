# -*- coding: utf-8 -*-
"""Copy of Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sRT6-6FC-93AnKhJUB0XbgkJ6wmYjZS7
"""

pip install openai==0.28

from google.colab import files
uploaded = files.upload()

from google.colab import files
uploaded = files.upload()

from google.colab import files
uploaded = files.upload()

from google.colab import files
uploaded = files.upload()



!pip show openai

import os

# Set your OpenAI API key securely
os.environ["OPENAI_API_KEY"] = "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"

import pandas as pd
import os
import openai
from google.colab import userdata

# Initialize OpenAI client
openai.api_key = os.getenv("OPENAI_API_KEY")

def get_ai_suggestion(preference: str, category: str):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "You are a helpful travel and event assistant."},
                {"role": "user", "content": f"Suggest a {category} based on this preference: {preference}. Keep it brief and practical."}
            ],
            temperature=0.7,
            max_tokens=100
        )
        return response['choices'][0]['message']['content'].strip()
    except Exception as e:
        print(f"AI Suggestion Error: {e}")
        return "No suggestion available at the moment"

def get_user_input():
    print("🏆 Welcome to Sports Travel Assistant 🏆\n")
    return {
        "fan_country": input("Your country: ").strip().lower(),
        "team1": input("First team: ").strip().lower(),
        "team2": input("Second team: ").strip().lower(),
        "style_preference": input("Preferred event style (historical/modern/family/etc): ").strip().lower(),
        "user_city": input("Current city in Saudi Arabia: ").strip().lower(),
        "user_gender": input("Gender preference (male/female/unisex): ").strip().lower(),
        "selected_province": input("Province for museums: ").strip().lower(),
        "selected_typology": input("Museum type (cultural/historical/art/etc): ").strip().lower()
    }

def main():
    inputs = get_user_input()

    try:
        # Load datasets
        matches_data = pd.read_excel("Stadiums_FanMeetUpsDataSet.xlsx", sheet_name=None)
        market_data = pd.read_csv("saudi_markets.csv")
        museums_data = pd.read_excel("List of public and private museums.xlsx")
        restaurant_data = pd.read_excel("Sample_Restaurant_Dataset.xlsx", sheet_name="Sheet1")

        # Standardize restaurant city names
        restaurant_data['City'] = restaurant_data['City'].str.strip().str.lower()
        restaurant_data['City'] = restaurant_data['City'].replace({'alkubar': 'al khobar'})

        # Process matches data
        matches_sheet = matches_data['matches']
        fan_preferences = matches_data['fan_preferences']

        # Get AI suggestion
        suggestion = get_ai_suggestion(inputs['style_preference'], "fan meetup theme")
        print(f"\n🎉 AI Suggested Fan Meetup Theme: {suggestion}")

        # Find match information
        match = matches_sheet[
            ((matches_sheet['Team 1'].str.lower() == inputs['team1']) &
             (matches_sheet['Team 2'].str.lower() == inputs['team2'])) |
            ((matches_sheet['Team 1'].str.lower() == inputs['team2']) &
             (matches_sheet['Team 2'].str.lower() == inputs['team1']))
        ]

        if not match.empty:
            match_info = match.iloc[0]
            print(f"\n⚽ Match Found: {match_info['Team 1']} vs {match_info['Team 2']}")
            print(f"📍 City: {match_info['City']}")
            print(f"🏟️ Stadium: {match_info['Stadium']}")

            # Find fan meetups
            meetups = fan_preferences[
                (fan_preferences['City'].str.lower() == match_info['City'].strip().lower()) &
                (fan_preferences['Style'].str.lower() == inputs['style_preference'])
            ]

            if not meetups.empty:
                print("\n🎪 Matching Fan Events:")
                for _, event in meetups.iterrows():
                    print(f"- {event['Fan festival']} ({event['Style']})")
            else:
                print("\nℹ️ No official events found for this style. Check local fan groups!")
        else:
            print("\n❌ Match not found. Check team names and try again.")

        # Show markets
        print(f"\n🛍️ Recommended Markets in {inputs['user_city'].title()}:")
        markets = market_data[
            (market_data['City'].str.lower() == inputs['user_city']) &
            (market_data['Gender'].str.lower().isin([inputs['user_gender'], 'unisex']))
        ]

        if not markets.empty:
            for _, market in markets.iterrows():
                print(f"- {market['Place_Name']} ({market['Gender']})")
        else:
            print("No markets found matching criteria")

        # Show museums
        museums_data.columns = museums_data.columns.str.strip().str.lower()
        museums = museums_data[
            (museums_data['province'].str.lower() == inputs['selected_province']) &
            (museums_data['typology'].str.lower() == inputs['selected_typology'])
        ]

        print(f"\n🏛️ Museums in {inputs['selected_province'].title()} ({inputs['selected_typology']}):")
        if not museums.empty:
            for _, museum in museums.iterrows():
                print(f"- {museum['asset name']} ({museum['organisational status']})")
        else:
            print("No museums found matching criteria")

        # Show restaurants
        print(f"\n🍴 Recommended Restaurants in {inputs['user_city'].title()}:")
        user_city = inputs['user_city'].lower().strip()
        restaurants = restaurant_data[restaurant_data['City'] == user_city]

        if not restaurants.empty:
            for _, restaurant in restaurants.iterrows():
                cuisines = restaurant['Cuisines'].strip("[]").replace("'", "")
                print(f"- {restaurant['name']} (Rating: {restaurant['rating']}, Cuisines: {cuisines})")
        else:
            print("No restaurants found in this city.")

    except Exception as e:
        print(f"\n⚠️ Error: {str(e)}")
        print("Please check your files and try again")

if __name__ == "__main__":
    main()